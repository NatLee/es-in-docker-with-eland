x-common-network: &network
  networks:
    - net

x-common-restart: &restart
  restart: always

x-common-mem-limit: &mem_limit
  mem_limit: ${MEM_LIMIT}

services:

  backend-es-setup:
    <<: [*network]
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    hostname: ${PROJECT_NAME}.backend-es-setup.${STACK_VERSION}
    container_name: ${PROJECT_NAME}-backend-es-setup
    volumes:
      - ./es-certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        echo "Setting up Elasticsearch";
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        echo "Setting up Elasticsearch certificates";
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - backend-elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://backend-elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://backend-elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
        echo "                                                                  ";
        echo "    ███████╗██╗      █████╗ ███████╗████████╗██╗ ██████╗         ";
        echo "    ██╔════╝██║     ██╔══██╗██╔════╝╚══██╔══╝██║██╔════╝         ";
        echo "    █████╗  ██║     ███████║███████╗   ██║   ██║██║              ";
        echo "    ██╔══╝  ██║     ██╔══██║╚════██║   ██║   ██║██║              ";
        echo "    ███████╗███████╗██║  ██║███████║   ██║   ██║╚██████╗         ";
        echo "    ╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝ ╚═════╝         ";
        echo "                                                                  ";
        echo "    ███████╗████████╗ █████╗  ██████╗██╗  ██╗                    ";
        echo "    ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██║ ██╔╝                    ";
        echo "    ███████╗   ██║   ███████║██║     █████╔╝                     ";
        echo "    ╚════██║   ██║   ██╔══██║██║     ██╔═██╗                     ";
        echo "    ███████║   ██║   ██║  ██║╚██████╗██║  ██╗                    ";
        echo "    ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝                    ";
        echo "                                                                  ";
        echo "        ██╗  ██╗██╗██████╗  █████╗ ███╗   ██╗ █████╗             ";
        echo "        ██║ ██╔╝██║██╔══██╗██╔══██╗████╗  ██║██╔══██╗            ";
        echo "        █████╔╝ ██║██████╔╝███████║██╔██╗ ██║███████║            ";
        echo "        ██╔═██╗ ██║██╔══██╗██╔══██║██║╚██╗██║██╔══██║            ";
        echo "        ██║  ██╗██║██████╔╝██║  ██║██║ ╚████║██║  ██║            ";
        echo "        ╚═╝  ╚═╝╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝            ";
        echo "                                                                  ";
        echo "        ╔═══════════════════════════════════════════╗            ";
        echo "        ║       Elastic Stack Setup Complete!       ║            ";
        echo "        ╚═══════════════════════════════════════════╝            ";
        echo "                                                                  ";
      '
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  backend-elasticsearch:
    <<: [*network, *restart, *mem_limit]
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    hostname: ${PROJECT_NAME}.es01.${STACK_VERSION}
    container_name: ${PROJECT_NAME}-elasticsearch
    volumes:
      - ./es-certs:/usr/share/elasticsearch/config/certs
      - ./es-data:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=elasticsearch
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic

    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    
  backend-kibana:
    <<: [*network, *restart, *mem_limit]
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    hostname: ${PROJECT_NAME}.kb01.${STACK_VERSION}
    container_name: ${PROJECT_NAME}-kibana
    volumes:
      - ./es-certs:/usr/share/kibana/config/certs
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVER_HOST=0.0.0.0
      - ELASTICSEARCH_HOSTS=https://backend-elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    depends_on:
      backend-elasticsearch:
        condition: service_healthy
      backend-es-setup:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

networks:
  net:
    name: ${PROJECT_NAME}-elastic-net
    driver: bridge
